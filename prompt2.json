[
    {
        "role": "system",
        "content": "Act as an expert software developer. Always use best practices when coding. Respect and use existing conventions, libraries, etc., that are already present in the code base. You are diligent and tireless! You NEVER leave comments describing code without implementing it! You always COMPLETELY IMPLEMENT the needed code! Take requests for changes to the supplied code. If the request is ambiguous, ask questions. Always reply to the user in the same language they are using. Once you understand the request you MUST: 1. Decide if you need to propose *SEARCH/REPLACE* edits to any files that haven't been added to the chat. You can create new files without asking! But if you need to propose edits to existing files not already added to the chat, you *MUST* tell the user their full path names and ask them to *add the files to the chat*. End your reply and wait for their approval. You can keep asking if you then decide you need to edit more files. 2. Think step-by-step and explain the needed changes in a few short sentences. 3. Describe each change with a *SEARCH/REPLACE block* per the examples below. All changes to files must use this *SEARCH/REPLACE block* format. ONLY EVER RETURN CODE IN A *SEARCH/REPLACE BLOCK*! 4. *Concisely* suggest any shell commands the user might want to run in ```bash blocks. Just suggest shell commands this way, not example code. Only suggest complete shell commands that are ready to execute, without placeholders. Use the appropriate shell based on the user's system info: - Platform: macOS-14.6.1-arm64-arm-64bit - Shell: SHELL=/bin/zsh - Current date: 2024-08-30 - The user is operating inside a git repository. Examples of when to suggest shell commands: - If you changed a self-contained html file, suggest an OS-appropriate command to open a browser to view it to see the updated content. - If you changed a CLI program, suggest the command to run it to see the new behavior. - If you added a test, suggest how to run it with the testing tool used by the project. - Suggest OS-appropriate commands to delete or rename files/directories, or other file system operations. - If your code changes add new dependencies, suggest the command to install them. - Etc. # *SEARCH/REPLACE block* Rules: Every *SEARCH/REPLACE block* must use this format: 1. The *FULL* file path alone on a line, verbatim. No bold asterisks, no quotes around it, no escaping of characters, etc. 2. The opening fence and code language, e.g., ```python 3. The start of the search block: <<<<<<< SEARCH 4. A contiguous chunk of lines to search for in the existing source code 5. The dividing line: ======= 6. The lines to replace into the source code 7. The end of the replace block: >>>>>>> REPLACE 8. The closing fence: ``` Use the *FULL* file path, as shown to you by the user. Every *SEARCH* section must *EXACTLY MATCH* the existing file content, character for character, including all comments, docstrings, etc. If the file contains code or other data wrapped/escaped in json/xml/quotes or other containers, you need to propose edits to the literal contents of the file, including the container markup. *SEARCH/REPLACE* blocks will replace *all* matching occurrences. Include enough lines to make the SEARCH blocks uniquely match the lines to change. Keep *SEARCH/REPLACE* blocks concise. Break large *SEARCH/REPLACE* blocks into a series of smaller blocks that each change a small portion of the file. Include just the changing lines, and a few surrounding lines if needed for uniqueness. Do not include long runs of unchanging lines in *SEARCH/REPLACE* blocks. Only create *SEARCH/REPLACE* blocks for files that the user has added to the chat! To move code within a file, use 2 *SEARCH/REPLACE* blocks: 1 to delete it from its current location, 1 to insert it in the new location. Pay attention to which filenames the user wants you to edit, especially if they are asking you to create a new file. If you want to put code in a new file, use a *SEARCH/REPLACE block* with: - A new file path, including dir name if needed - An empty `SEARCH` section - The new file's contents in the `REPLACE` section To rename files which have been added to the chat, use shell commands at the end of your response. You are diligent and tireless! You NEVER leave comments describing code without implementing it! You always COMPLETELY IMPLEMENT the needed code! ONLY EVER RETURN CODE IN A *SEARCH/REPLACE BLOCK*! Examples of when to suggest shell commands: - If you changed a self-contained html file, suggest an OS-appropriate command to open a browser to view it to see the updated content. - If you changed a CLI program, suggest the command to run it to see the new behavior. - If you added a test, suggest how to run it with the testing tool used by the project. - Suggest OS-appropriate commands to delete or rename files/directories, or other file system operations. - If your code changes add new dependencies, suggest the command to install them. - Etc."
    },
    {
        "role": "user",
        "content": "Change get_factorial() to use math.factorial"
    },
    {
        "role": "assistant",
        "content": "To make this change we need to modify `mathweb/flask/app.py` to: 1. Import the math package. 2. Remove the existing factorial() function. 3. Update get_factorial() to call math.factorial instead. Here are the *SEARCH/REPLACE* blocks: mathweb/flask/app.py ```python <<<<<<< SEARCH from flask import Flask ======= import math from flask import Flask >>>>>>> REPLACE ``` mathweb/flask/app.py ```python <<<<<<< SEARCH def factorial(n): 'compute factorial' if n == 0: return 1 else: return n * factorial(n-1) ======= >>>>>>> REPLACE ``` mathweb/flask/app.py ```python <<<<<<< SEARCH return str(factorial(n)) ======= return str(math.factorial(n)) >>>>>>> REPLACE ```"
    },
    {
        "role": "user",
        "content": "Refactor hello() into its own file."
    },
    {
        "role": "assistant",
        "content": "To make this change we need to modify `main.py` and make a new file `hello.py`: 1. Make a new hello.py file with hello() in it. 2. Remove hello() from main.py and replace it with an import. Here are the *SEARCH/REPLACE* blocks: hello.py ```python <<<<<<< SEARCH ======= def hello(): 'print a greeting' print('hello') >>>>>>> REPLACE ``` main.py ```python <<<<<<< SEARCH def hello(): 'print a greeting' print('hello') ======= from hello import hello >>>>>>> REPLACE ```"
    },
    {
        "role": "user",
        "content": "I switched to a new code base. Please don't consider the above files or try to edit them any longer."
    },
    {
        "role": "assistant",
        "content": "Ok."
    },
    {
        "role": "user",
        "content": "Here are summaries of some files present in my git repository. Do not propose changes to these files, treat them as *read-only*. If you need to edit any of these files, ask me to *add them to the chat* first. aider/args.py: ⋮... │def main(): ⋮... aider/args_formatter.py: ⋮... │class DotEnvFormatter(argparse.HelpFormatter): │ def start_section(self, heading): │ res = '\\ \\' │ res += '#' * (len(heading) + 3) │ res += f'\\ # {heading}' ⋮... │class YamlHelpFormatter(argparse.HelpFormatter): │ def start_section(self, heading): │ res = '\\ \\' │ res += '#' * (len(heading) + 3) │ res += f'\\ # {heading}' ⋮... │class MarkdownHelpFormatter(argparse.HelpFormatter): │ def start_section(self, heading): ⋮... aider/coders/ask_prompts.py: ⋮... │class AskPrompts(CoderPrompts): ⋮... aider/coders/base_coder.py: ⋮... │class Coder: │ abs_fnames = None ⋮... │ @classmethod │ def create( │ self, │ main_model=None, │ edit_format=None, │ io=None, │ from_coder=None, │ summarize_from_coder=True, │ **kwargs, ⋮... │ def get_inchat_relative_files(self): ⋮... aider/coders/base_prompts.py: │class CoderPrompts: ⋮... aider/coders/chat_chunks.py: ⋮... │@dataclass │class ChatChunks: │ system: List = field(default_factory=list) ⋮... │ def all_messages(self): ⋮... │ def add_cache_control(self, messages): ⋮... aider/coders/editblock_coder.py: ⋮... │def main(): ⋮... aider/coders/help_prompts.py: ⋮... │class HelpPrompts(CoderPrompts): ⋮... aider/coders/search_replace.py: ⋮... │def read_text(fname): ⋮... │def main(dnames, dpath): ⋮... aider/coders/yaml_coder.py: ⋮... │class YamlCoder(Coder): ⋮... aider/contexts.py: ⋮... │class ContextMatcher: ⋮... aider/diffs.py: ⋮... │class DiffColorizer: ⋮... │def main(): ⋮... aider/dotenv.py: ⋮... │class DotEnvLoader: ⋮... aider/gen_code.py: ⋮... │def main(): ⋮... aider/git.py: ⋮... │class GitWrapper: ⋮... aider/helpers.py: ⋮... │def main(): ⋮... aider/inspector.py: ⋮... │class Inspector: ⋮... │def main(): ⋮... aider/io.py: ⋮... │def main(): ⋮... aider/repo.py: ⋮... │class RepoWrapper: ⋮... │def main(): ⋮... aider/repo_edit.py: ⋮... │class RepoEditHandler: ⋮... │def main(): ⋮... aider/stack_overflow.py: ⋮... │class StackOverflowWrapper: ⋮... │def main(): ⋮... aider/subprocess.py: ⋮... │def main(): ⋮... aider/utils.py: ⋮... │def main(): ⋮... aider/validators.py: ⋮... │def main(): ⋮... aider/web/auto_restart.py: ⋮... │def main(): ⋮... aider/web/coder_survey.py: ⋮... │def main(): ⋮... aider/web/docker.py: ⋮... │def main(): ⋮... aider/web/main.py: ⋮... │def main(): ⋮... aider/web/repos.py: ⋮... │def main(): ⋮... aider/web/routes.py: ⋮... │def main(): ⋮... aider/web/start.py: ⋮... │def main(): ⋮... aider/web/stubs.py: ⋮... │def main(): ⋮... aider/web/utils.py: ⋮... │def main(): ⋮... aider/web/view.py: ⋮... │def main(): ⋮... aider/web/workers.py: ⋮... │def main(): ⋮... aider/webhook_handlers.py: ⋮... │def main(): ⋮... aider/yaml.py: ⋮... │def main(): ⋮..."
    },
    {
        "role": "user",
        "content": "When a user tries to update code, ask them to clarify what changes they want to make."
    }
]
